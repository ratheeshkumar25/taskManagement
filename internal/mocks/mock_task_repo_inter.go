// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/interfaces/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ratheeshkumar25/task-mgt/internal/models"
)

// MockTaskRepoInter is a mock of TaskRepoInter interface.
type MockTaskRepoInter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepoInterMockRecorder
}

// MockTaskRepoInterMockRecorder is the mock recorder for MockTaskRepoInter.
type MockTaskRepoInterMockRecorder struct {
	mock *MockTaskRepoInter
}

// NewMockTaskRepoInter creates a new mock instance.
func NewMockTaskRepoInter(ctrl *gomock.Controller) *MockTaskRepoInter {
	mock := &MockTaskRepoInter{ctrl: ctrl}
	mock.recorder = &MockTaskRepoInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepoInter) EXPECT() *MockTaskRepoInterMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepoInter) CreateTask(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepoInterMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepoInter)(nil).CreateTask), task)
}

// CreateUser mocks base method.
func (m *MockTaskRepoInter) CreateUser(user *models.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTaskRepoInterMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTaskRepoInter)(nil).CreateUser), user)
}

// DeleteTask mocks base method.
func (m *MockTaskRepoInter) DeleteTask(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepoInterMockRecorder) DeleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepoInter)(nil).DeleteTask), id)
}

// FindUserByID mocks base method.
func (m *MockTaskRepoInter) FindUserByID(userID uint) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", userID)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockTaskRepoInterMockRecorder) FindUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockTaskRepoInter)(nil).FindUserByID), userID)
}

// GetFilteredTasks mocks base method.
func (m *MockTaskRepoInter) GetFilteredTasks(status, dueDateAfter, sortBy, sortOrder string, page, limit int) ([]models.Task, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredTasks", status, dueDateAfter, sortBy, sortOrder, page, limit)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFilteredTasks indicates an expected call of GetFilteredTasks.
func (mr *MockTaskRepoInterMockRecorder) GetFilteredTasks(status, dueDateAfter, sortBy, sortOrder, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredTasks", reflect.TypeOf((*MockTaskRepoInter)(nil).GetFilteredTasks), status, dueDateAfter, sortBy, sortOrder, page, limit)
}

// GetTaskByID mocks base method.
func (m *MockTaskRepoInter) GetTaskByID(id uint) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskRepoInterMockRecorder) GetTaskByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskRepoInter)(nil).GetTaskByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockTaskRepoInter) GetUserByUsername(usename string) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", usename)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockTaskRepoInterMockRecorder) GetUserByUsername(usename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockTaskRepoInter)(nil).GetUserByUsername), usename)
}

// GetUserList mocks base method.
func (m *MockTaskRepoInter) GetUserList() ([]*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList")
	ret0, _ := ret[0].([]*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockTaskRepoInterMockRecorder) GetUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockTaskRepoInter)(nil).GetUserList))
}

// UpdateTask mocks base method.
func (m *MockTaskRepoInter) UpdateTask(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepoInterMockRecorder) UpdateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepoInter)(nil).UpdateTask), task)
}
