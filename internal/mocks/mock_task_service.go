// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/interfaces/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ratheeshkumar25/task-mgt/internal/models"
)

// MockTaskServiceInter is a mock of TaskServiceInter interface.
type MockTaskServiceInter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceInterMockRecorder
}

// MockTaskServiceInterMockRecorder is the mock recorder for MockTaskServiceInter.
type MockTaskServiceInterMockRecorder struct {
	mock *MockTaskServiceInter
}

// NewMockTaskServiceInter creates a new mock instance.
func NewMockTaskServiceInter(ctrl *gomock.Controller) *MockTaskServiceInter {
	mock := &MockTaskServiceInter{ctrl: ctrl}
	mock.recorder = &MockTaskServiceInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceInter) EXPECT() *MockTaskServiceInterMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskServiceInter) CreateTask(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServiceInterMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskServiceInter)(nil).CreateTask), task)
}

// CreateUser mocks base method.
func (m *MockTaskServiceInter) CreateUser(user *models.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTaskServiceInterMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTaskServiceInter)(nil).CreateUser), user)
}

// DeleteTask mocks base method.
func (m *MockTaskServiceInter) DeleteTask(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskServiceInterMockRecorder) DeleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskServiceInter)(nil).DeleteTask), id)
}

// GetAllTasks mocks base method.
func (m *MockTaskServiceInter) GetAllTasks(status, dueDateAfter, sortBy, sortOrder string, page, limit int) ([]models.Task, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", status, dueDateAfter, sortBy, sortOrder, page, limit)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskServiceInterMockRecorder) GetAllTasks(status, dueDateAfter, sortBy, sortOrder, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTaskServiceInter)(nil).GetAllTasks), status, dueDateAfter, sortBy, sortOrder, page, limit)
}

// GetTaskByID mocks base method.
func (m *MockTaskServiceInter) GetTaskByID(id uint) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskServiceInterMockRecorder) GetTaskByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskServiceInter)(nil).GetTaskByID), id)
}

// LoginUser mocks base method.
func (m *MockTaskServiceInter) LoginUser(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockTaskServiceInterMockRecorder) LoginUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockTaskServiceInter)(nil).LoginUser), username, password)
}

// UpdateTask mocks base method.
func (m *MockTaskServiceInter) UpdateTask(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskServiceInterMockRecorder) UpdateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskServiceInter)(nil).UpdateTask), task)
}
